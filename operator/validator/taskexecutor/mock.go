// Code generated by MockGen. DO NOT EDIT.
// Source: ./task_executor.go

// Package taskexecutor is a generated GoMock package.
package taskexecutor

import (
	reflect "reflect"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/bloxapp/ssv-spec/types"
	types0 "github.com/bloxapp/ssv/protocol/v2/types"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExitValidator mocks base method.
func (m *MockExecutor) ExitValidator(pubKey phase0.BLSPubKey, blockNumber uint64, validatorIndex phase0.ValidatorIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitValidator", pubKey, blockNumber, validatorIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExitValidator indicates an expected call of ExitValidator.
func (mr *MockExecutorMockRecorder) ExitValidator(pubKey, blockNumber, validatorIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitValidator", reflect.TypeOf((*MockExecutor)(nil).ExitValidator), pubKey, blockNumber, validatorIndex)
}

// LiquidateCluster mocks base method.
func (m *MockExecutor) LiquidateCluster(owner common.Address, operatorIDs []uint64, toLiquidate []*types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiquidateCluster", owner, operatorIDs, toLiquidate)
	ret0, _ := ret[0].(error)
	return ret0
}

// LiquidateCluster indicates an expected call of LiquidateCluster.
func (mr *MockExecutorMockRecorder) LiquidateCluster(owner, operatorIDs, toLiquidate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidateCluster", reflect.TypeOf((*MockExecutor)(nil).LiquidateCluster), owner, operatorIDs, toLiquidate)
}

// ReactivateCluster mocks base method.
func (m *MockExecutor) ReactivateCluster(owner common.Address, operatorIDs []uint64, toReactivate []*types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateCluster", owner, operatorIDs, toReactivate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReactivateCluster indicates an expected call of ReactivateCluster.
func (mr *MockExecutorMockRecorder) ReactivateCluster(owner, operatorIDs, toReactivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateCluster", reflect.TypeOf((*MockExecutor)(nil).ReactivateCluster), owner, operatorIDs, toReactivate)
}

// StartValidator mocks base method.
func (m *MockExecutor) StartValidator(share *types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartValidator", share)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartValidator indicates an expected call of StartValidator.
func (mr *MockExecutorMockRecorder) StartValidator(share interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartValidator", reflect.TypeOf((*MockExecutor)(nil).StartValidator), share)
}

// StopValidator mocks base method.
func (m *MockExecutor) StopValidator(pubKey types.ValidatorPK) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopValidator", pubKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopValidator indicates an expected call of StopValidator.
func (mr *MockExecutorMockRecorder) StopValidator(pubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopValidator", reflect.TypeOf((*MockExecutor)(nil).StopValidator), pubKey)
}

// UpdateFeeRecipient mocks base method.
func (m *MockExecutor) UpdateFeeRecipient(owner, recipient common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeeRecipient", owner, recipient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeeRecipient indicates an expected call of UpdateFeeRecipient.
func (mr *MockExecutorMockRecorder) UpdateFeeRecipient(owner, recipient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeRecipient", reflect.TypeOf((*MockExecutor)(nil).UpdateFeeRecipient), owner, recipient)
}
