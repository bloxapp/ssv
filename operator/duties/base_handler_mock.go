// Code generated by MockGen. DO NOT EDIT.
// Source: ./base_handler.go

// Package duties is a generated GoMock package.
package duties

import (
	context "context"
	reflect "reflect"
	sync "sync"

	networkconfig "github.com/bloxapp/ssv/networkconfig"
	slotticker "github.com/bloxapp/ssv/operator/slotticker"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockdutyHandler is a mock of dutyHandler interface.
type MockdutyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockdutyHandlerMockRecorder
}

// MockdutyHandlerMockRecorder is the mock recorder for MockdutyHandler.
type MockdutyHandlerMockRecorder struct {
	mock *MockdutyHandler
}

// NewMockdutyHandler creates a new mock instance.
func NewMockdutyHandler(ctrl *gomock.Controller) *MockdutyHandler {
	mock := &MockdutyHandler{ctrl: ctrl}
	mock.recorder = &MockdutyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdutyHandler) EXPECT() *MockdutyHandlerMockRecorder {
	return m.recorder
}

// HandleDuties mocks base method.
func (m *MockdutyHandler) HandleDuties(arg0 context.Context, arg1 *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDuties", arg0, arg1)
}

// HandleDuties indicates an expected call of HandleDuties.
func (mr *MockdutyHandlerMockRecorder) HandleDuties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDuties", reflect.TypeOf((*MockdutyHandler)(nil).HandleDuties), arg0, arg1)
}

// Name mocks base method.
func (m *MockdutyHandler) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockdutyHandlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockdutyHandler)(nil).Name))
}

// Setup mocks base method.
func (m *MockdutyHandler) Setup(arg0 string, arg1 *zap.Logger, arg2 BeaconNode, arg3 networkconfig.NetworkConfig, arg4 ValidatorController, arg5 ExecuteDutiesFunc, arg6 slotticker.Provider, arg7 chan ReorgEvent, arg8 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Setup", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// Setup indicates an expected call of Setup.
func (mr *MockdutyHandlerMockRecorder) Setup(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockdutyHandler)(nil).Setup), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// WaitForInitFetch mocks base method.
func (m *MockdutyHandler) WaitForInitFetch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldFetchFirst")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldFetchFirst indicates an expected call of ShouldFetchFirst.
func (mr *MockdutyHandlerMockRecorder) ShouldFetchFirst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldFetchFirst", reflect.TypeOf((*MockdutyHandler)(nil).WaitForInitFetch))
}
