// Code generated by MockGen. DO NOT EDIT.
// Source: ./scheduler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/attestantio/go-eth2-client"
	v1 "github.com/attestantio/go-eth2-client/api/v1"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/bloxapp/ssv/protocol/v2/types"
	gomock "github.com/golang/mock/gomock"
	event "github.com/prysmaticlabs/prysm/v4/async/event"
)

// MockSlotTicker is a mock of SlotTicker interface.
type MockSlotTicker struct {
	ctrl     *gomock.Controller
	recorder *MockSlotTickerMockRecorder
}

// MockSlotTickerMockRecorder is the mock recorder for MockSlotTicker.
type MockSlotTickerMockRecorder struct {
	mock *MockSlotTicker
}

// NewMockSlotTicker creates a new mock instance.
func NewMockSlotTicker(ctrl *gomock.Controller) *MockSlotTicker {
	mock := &MockSlotTicker{ctrl: ctrl}
	mock.recorder = &MockSlotTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotTicker) EXPECT() *MockSlotTickerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSlotTicker) Subscribe(subscription chan phase0.Slot) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subscription)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSlotTickerMockRecorder) Subscribe(subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSlotTicker)(nil).Subscribe), subscription)
}

// MockBeaconNode is a mock of BeaconNode interface.
type MockBeaconNode struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconNodeMockRecorder
}

// MockBeaconNodeMockRecorder is the mock recorder for MockBeaconNode.
type MockBeaconNodeMockRecorder struct {
	mock *MockBeaconNode
}

// NewMockBeaconNode creates a new mock instance.
func NewMockBeaconNode(ctrl *gomock.Controller) *MockBeaconNode {
	mock := &MockBeaconNode{ctrl: ctrl}
	mock.recorder = &MockBeaconNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconNode) EXPECT() *MockBeaconNodeMockRecorder {
	return m.recorder
}

// AttesterDuties mocks base method.
func (m *MockBeaconNode) AttesterDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) ([]*v1.AttesterDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttesterDuties", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*v1.AttesterDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttesterDuties indicates an expected call of AttesterDuties.
func (mr *MockBeaconNodeMockRecorder) AttesterDuties(ctx, epoch, validatorIndices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttesterDuties", reflect.TypeOf((*MockBeaconNode)(nil).AttesterDuties), ctx, epoch, validatorIndices)
}

// Events mocks base method.
func (m *MockBeaconNode) Events(ctx context.Context, topics []string, handler client.EventHandlerFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, topics, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockBeaconNodeMockRecorder) Events(ctx, topics, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockBeaconNode)(nil).Events), ctx, topics, handler)
}

// ProposerDuties mocks base method.
func (m *MockBeaconNode) ProposerDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) ([]*v1.ProposerDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposerDuties", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*v1.ProposerDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposerDuties indicates an expected call of ProposerDuties.
func (mr *MockBeaconNodeMockRecorder) ProposerDuties(ctx, epoch, validatorIndices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposerDuties", reflect.TypeOf((*MockBeaconNode)(nil).ProposerDuties), ctx, epoch, validatorIndices)
}

// SubmitBeaconCommitteeSubscriptions mocks base method.
func (m *MockBeaconNode) SubmitBeaconCommitteeSubscriptions(ctx context.Context, subscription []*v1.BeaconCommitteeSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBeaconCommitteeSubscriptions", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitBeaconCommitteeSubscriptions indicates an expected call of SubmitBeaconCommitteeSubscriptions.
func (mr *MockBeaconNodeMockRecorder) SubmitBeaconCommitteeSubscriptions(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBeaconCommitteeSubscriptions", reflect.TypeOf((*MockBeaconNode)(nil).SubmitBeaconCommitteeSubscriptions), ctx, subscription)
}

// SubmitSyncCommitteeSubscriptions mocks base method.
func (m *MockBeaconNode) SubmitSyncCommitteeSubscriptions(ctx context.Context, subscription []*v1.SyncCommitteeSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSyncCommitteeSubscriptions", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitSyncCommitteeSubscriptions indicates an expected call of SubmitSyncCommitteeSubscriptions.
func (mr *MockBeaconNodeMockRecorder) SubmitSyncCommitteeSubscriptions(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSyncCommitteeSubscriptions", reflect.TypeOf((*MockBeaconNode)(nil).SubmitSyncCommitteeSubscriptions), ctx, subscription)
}

// SyncCommitteeDuties mocks base method.
func (m *MockBeaconNode) SyncCommitteeDuties(ctx context.Context, epoch phase0.Epoch, indices []phase0.ValidatorIndex) ([]*v1.SyncCommitteeDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCommitteeDuties", ctx, epoch, indices)
	ret0, _ := ret[0].([]*v1.SyncCommitteeDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCommitteeDuties indicates an expected call of SyncCommitteeDuties.
func (mr *MockBeaconNodeMockRecorder) SyncCommitteeDuties(ctx, epoch, indices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCommitteeDuties", reflect.TypeOf((*MockBeaconNode)(nil).SyncCommitteeDuties), ctx, epoch, indices)
}

// MockValidatorController is a mock of ValidatorController interface.
type MockValidatorController struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorControllerMockRecorder
}

// MockValidatorControllerMockRecorder is the mock recorder for MockValidatorController.
type MockValidatorControllerMockRecorder struct {
	mock *MockValidatorController
}

// NewMockValidatorController creates a new mock instance.
func NewMockValidatorController(ctrl *gomock.Controller) *MockValidatorController {
	mock := &MockValidatorController{ctrl: ctrl}
	mock.recorder = &MockValidatorControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorController) EXPECT() *MockValidatorControllerMockRecorder {
	return m.recorder
}

// ActiveValidatorIndices mocks base method.
func (m *MockValidatorController) ActiveValidatorIndices(epoch phase0.Epoch) []phase0.ValidatorIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveValidatorIndices", epoch)
	ret0, _ := ret[0].([]phase0.ValidatorIndex)
	return ret0
}

// ActiveValidatorIndices indicates an expected call of ActiveValidatorIndices.
func (mr *MockValidatorControllerMockRecorder) ActiveValidatorIndices(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveValidatorIndices", reflect.TypeOf((*MockValidatorController)(nil).ActiveValidatorIndices), epoch)
}

// GetOperatorShares mocks base method.
func (m *MockValidatorController) GetOperatorShares() []*types.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorShares")
	ret0, _ := ret[0].([]*types.SSVShare)
	return ret0
}

// GetOperatorShares indicates an expected call of GetOperatorShares.
func (mr *MockValidatorControllerMockRecorder) GetOperatorShares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorShares", reflect.TypeOf((*MockValidatorController)(nil).GetOperatorShares))
}
