// Code generated by MockGen. DO NOT EDIT.
// Source: ./scheduler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"
	time "time"

	client "github.com/attestantio/go-eth2-client"
	v1 "github.com/attestantio/go-eth2-client/api/v1"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/bloxapp/ssv-spec/types"
	types0 "github.com/bloxapp/ssv/protocol/v2/types"
	types1 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSlotTicker is a mock of SlotTicker interface.
type MockSlotTicker struct {
	ctrl     *gomock.Controller
	recorder *MockSlotTickerMockRecorder
}

// MockSlotTickerMockRecorder is the mock recorder for MockSlotTicker.
type MockSlotTickerMockRecorder struct {
	mock *MockSlotTicker
}

// NewMockSlotTicker creates a new mock instance.
func NewMockSlotTicker(ctrl *gomock.Controller) *MockSlotTicker {
	mock := &MockSlotTicker{ctrl: ctrl}
	mock.recorder = &MockSlotTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotTicker) EXPECT() *MockSlotTickerMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSlotTicker) Next() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSlotTickerMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSlotTicker)(nil).Next))
}

// Slot mocks base method.
func (m *MockSlotTicker) Slot() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slot")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// Slot indicates an expected call of Slot.
func (mr *MockSlotTickerMockRecorder) Slot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slot", reflect.TypeOf((*MockSlotTicker)(nil).Slot))
}

// MockBeaconNode is a mock of BeaconNode interface.
type MockBeaconNode struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconNodeMockRecorder
}

// MockBeaconNodeMockRecorder is the mock recorder for MockBeaconNode.
type MockBeaconNodeMockRecorder struct {
	mock *MockBeaconNode
}

// NewMockBeaconNode creates a new mock instance.
func NewMockBeaconNode(ctrl *gomock.Controller) *MockBeaconNode {
	mock := &MockBeaconNode{ctrl: ctrl}
	mock.recorder = &MockBeaconNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconNode) EXPECT() *MockBeaconNodeMockRecorder {
	return m.recorder
}

// AttesterDuties mocks base method.
func (m *MockBeaconNode) AttesterDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) ([]*v1.AttesterDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttesterDuties", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*v1.AttesterDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttesterDuties indicates an expected call of AttesterDuties.
func (mr *MockBeaconNodeMockRecorder) AttesterDuties(ctx, epoch, validatorIndices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttesterDuties", reflect.TypeOf((*MockBeaconNode)(nil).AttesterDuties), ctx, epoch, validatorIndices)
}

// Events mocks base method.
func (m *MockBeaconNode) Events(ctx context.Context, topics []string, handler client.EventHandlerFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, topics, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockBeaconNodeMockRecorder) Events(ctx, topics, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockBeaconNode)(nil).Events), ctx, topics, handler)
}

// ProposerDuties mocks base method.
func (m *MockBeaconNode) ProposerDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) ([]*v1.ProposerDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposerDuties", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*v1.ProposerDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposerDuties indicates an expected call of ProposerDuties.
func (mr *MockBeaconNodeMockRecorder) ProposerDuties(ctx, epoch, validatorIndices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposerDuties", reflect.TypeOf((*MockBeaconNode)(nil).ProposerDuties), ctx, epoch, validatorIndices)
}

// SubmitBeaconCommitteeSubscriptions mocks base method.
func (m *MockBeaconNode) SubmitBeaconCommitteeSubscriptions(ctx context.Context, subscription []*v1.BeaconCommitteeSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBeaconCommitteeSubscriptions", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitBeaconCommitteeSubscriptions indicates an expected call of SubmitBeaconCommitteeSubscriptions.
func (mr *MockBeaconNodeMockRecorder) SubmitBeaconCommitteeSubscriptions(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBeaconCommitteeSubscriptions", reflect.TypeOf((*MockBeaconNode)(nil).SubmitBeaconCommitteeSubscriptions), ctx, subscription)
}

// SubmitSyncCommitteeSubscriptions mocks base method.
func (m *MockBeaconNode) SubmitSyncCommitteeSubscriptions(ctx context.Context, subscription []*v1.SyncCommitteeSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSyncCommitteeSubscriptions", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitSyncCommitteeSubscriptions indicates an expected call of SubmitSyncCommitteeSubscriptions.
func (mr *MockBeaconNodeMockRecorder) SubmitSyncCommitteeSubscriptions(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSyncCommitteeSubscriptions", reflect.TypeOf((*MockBeaconNode)(nil).SubmitSyncCommitteeSubscriptions), ctx, subscription)
}

// SyncCommitteeDuties mocks base method.
func (m *MockBeaconNode) SyncCommitteeDuties(ctx context.Context, epoch phase0.Epoch, indices []phase0.ValidatorIndex) ([]*v1.SyncCommitteeDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCommitteeDuties", ctx, epoch, indices)
	ret0, _ := ret[0].([]*v1.SyncCommitteeDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCommitteeDuties indicates an expected call of SyncCommitteeDuties.
func (mr *MockBeaconNodeMockRecorder) SyncCommitteeDuties(ctx, epoch, indices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCommitteeDuties", reflect.TypeOf((*MockBeaconNode)(nil).SyncCommitteeDuties), ctx, epoch, indices)
}

// MockExecutionClient is a mock of ExecutionClient interface.
type MockExecutionClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionClientMockRecorder
}

// MockExecutionClientMockRecorder is the mock recorder for MockExecutionClient.
type MockExecutionClientMockRecorder struct {
	mock *MockExecutionClient
}

// NewMockExecutionClient creates a new mock instance.
func NewMockExecutionClient(ctrl *gomock.Controller) *MockExecutionClient {
	mock := &MockExecutionClient{ctrl: ctrl}
	mock.recorder = &MockExecutionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionClient) EXPECT() *MockExecutionClientMockRecorder {
	return m.recorder
}

// BlockByNumber mocks base method.
func (m *MockExecutionClient) BlockByNumber(ctx context.Context, blockNumber *big.Int) (*types1.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(*types1.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockExecutionClientMockRecorder) BlockByNumber(ctx, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockExecutionClient)(nil).BlockByNumber), ctx, blockNumber)
}

// MockValidatorStore is a mock of ValidatorStore interface.
type MockValidatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorStoreMockRecorder
}

// MockValidatorStoreMockRecorder is the mock recorder for MockValidatorStore.
type MockValidatorStoreMockRecorder struct {
	mock *MockValidatorStore
}

// NewMockValidatorStore creates a new mock instance.
func NewMockValidatorStore(ctrl *gomock.Controller) *MockValidatorStore {
	mock := &MockValidatorStore{ctrl: ctrl}
	mock.recorder = &MockValidatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorStore) EXPECT() *MockValidatorStoreMockRecorder {
	return m.recorder
}

// AllActiveIndices mocks base method.
func (m *MockValidatorStore) AllActiveIndices(epoch phase0.Epoch) []phase0.ValidatorIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllActiveIndices", epoch)
	ret0, _ := ret[0].([]phase0.ValidatorIndex)
	return ret0
}

// AllActiveIndices indicates an expected call of AllActiveIndices.
func (mr *MockValidatorStoreMockRecorder) AllActiveIndices(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllActiveIndices", reflect.TypeOf((*MockValidatorStore)(nil).AllActiveIndices), epoch)
}

// CommitteeActiveIndices mocks base method.
func (m *MockValidatorStore) CommitteeActiveIndices(epoch phase0.Epoch) []phase0.ValidatorIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitteeActiveIndices", epoch)
	ret0, _ := ret[0].([]phase0.ValidatorIndex)
	return ret0
}

// CommitteeActiveIndices indicates an expected call of CommitteeActiveIndices.
func (mr *MockValidatorStoreMockRecorder) CommitteeActiveIndices(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitteeActiveIndices", reflect.TypeOf((*MockValidatorStore)(nil).CommitteeActiveIndices), epoch)
}

// GetOperatorShares mocks base method.
func (m *MockValidatorStore) GetOperatorShares() []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorShares")
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// GetOperatorShares indicates an expected call of GetOperatorShares.
func (mr *MockValidatorStoreMockRecorder) GetOperatorShares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorShares", reflect.TypeOf((*MockValidatorStore)(nil).GetOperatorShares))
}

// MockDutyExecutor is a mock of DutyExecutor interface.
type MockDutyExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockDutyExecutorMockRecorder
}

// MockDutyExecutorMockRecorder is the mock recorder for MockDutyExecutor.
type MockDutyExecutorMockRecorder struct {
	mock *MockDutyExecutor
}

// NewMockDutyExecutor creates a new mock instance.
func NewMockDutyExecutor(ctrl *gomock.Controller) *MockDutyExecutor {
	mock := &MockDutyExecutor{ctrl: ctrl}
	mock.recorder = &MockDutyExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutyExecutor) EXPECT() *MockDutyExecutorMockRecorder {
	return m.recorder
}

// ExecuteDuty mocks base method.
func (m *MockDutyExecutor) ExecuteDuty(duty *types.Duty) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteDuty", duty)
}

// ExecuteDuty indicates an expected call of ExecuteDuty.
func (mr *MockDutyExecutorMockRecorder) ExecuteDuty(duty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDuty", reflect.TypeOf((*MockDutyExecutor)(nil).ExecuteDuty), duty)
}
