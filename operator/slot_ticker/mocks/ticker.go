// Code generated by MockGen. DO NOT EDIT.
// Source: ./ticker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	gomock "github.com/golang/mock/gomock"
	event "github.com/prysmaticlabs/prysm/async/event"
	zap "go.uber.org/zap"
	reflect "reflect"
)

// MockTicker is a mock of Ticker interface
type MockTicker struct {
	ctrl     *gomock.Controller
	recorder *MockTickerMockRecorder
}

// MockTickerMockRecorder is the mock recorder for MockTicker
type MockTickerMockRecorder struct {
	mock *MockTicker
}

// NewMockTicker creates a new mock instance
func NewMockTicker(ctrl *gomock.Controller) *MockTicker {
	mock := &MockTicker{ctrl: ctrl}
	mock.recorder = &MockTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicker) EXPECT() *MockTickerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTicker) Start(logger *zap.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", logger)
}

// Start indicates an expected call of Start
func (mr *MockTickerMockRecorder) Start(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTicker)(nil).Start), logger)
}

// Subscribe mocks base method
func (m *MockTicker) Subscribe(subscription chan phase0.Slot) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subscription)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockTickerMockRecorder) Subscribe(subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTicker)(nil).Subscribe), subscription)
}
