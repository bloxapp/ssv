package eth1

import (
	"encoding/hex"
	"encoding/json"
	"strings"
	"testing"

	"github.com/bloxapp/ssv/eth1/abiparser"
	"github.com/bloxapp/ssv/logging"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/pkg/errors"
	"github.com/stretchr/testify/require"
)

func TestParseOperatorAddedEvent(t *testing.T) {
	var rawOperatorAdded = `{
  "address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
  "topics": [
	"0xd839f31c14bd632f424e307b36abff63ca33684f77f28e35dc13718ef338f7f4",
	"0x0000000000000000000000000000000000000000000000000000000000000001",
	"0x00000000000000000000000097a6c1f3aab5427b901fb135ed492749191c0f1f"
  ],
  "data": "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000deb9cd9e0000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556424e32705863457872656d643254586476527a684e64455679556a494b524768554d6b313164456c6d59556430566d784d654456574b326734616d7772646e6c7854315976636d784b5245566c517939484d7a567056304d3057455533526e464b55566331516d707651575a315458685165677052517a5a364d45453162314933656e52755748553263305633546b684a534668335245464954486c54645664514d334247596c6f30516e63356231465a54554a6d62564e734c33685852307379566e4e336156686b436b4e4663555a4b526d644e55466b334e6c4a5159306f325232646b545763725756525257565646616d6c52546a4670646d4a4b5a6a5257615570435254637262564e7465465a4e4e54417a566d6c7951575a6e646b494b656e426e64544e7a64485a496448705256315a3265484a304e545230526d39444d48526d5745315252584e53553056745456526f566b686f63566f725a544a434f43396b545751325231466f646e45355a58523152517068516b786f536c704655586c704d6b6c7055553032556c6732613031765a476447556d6376656d747454465a5851305649547a457a61465635526b6f78616e67314c304d3562454979553256454e57396a64316834436d4a525355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b00000000000000000000000000000000000000000000000000000000",
  "blockNumber": "0x6E1070",
  "transactionHash": "0xf9b5aeb83f01d1080d26961b770926a592d5d111af68dd8d587244a63219b616"
}`

	t.Run("operator added", func(t *testing.T) {
		LogOperatorAdded, contractAbi := unmarshalLog(t, rawOperatorAdded, V1)
		abiParser := NewParser(logging.TestLogger(t), V1)
		parsed, err := abiParser.ParseOperatorAddedEvent(*LogOperatorAdded, contractAbi)
		var malformedEventErr *abiparser.MalformedEventError
		require.NoError(t, err)
		require.False(t, errors.As(err, &malformedEventErr))
		require.NotNil(t, contractAbi)
		require.NotNil(t, parsed)
		require.Equal(t, "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBN2pXcExremd2TXdvRzhNdEVyUjIKRGhUMk11dElmYUd0VmxMeDVWK2g4amwrdnlxT1YvcmxKREVlQy9HMzVpV0M0WEU3RnFKUVc1QmpvQWZ1TXhQegpRQzZ6MEE1b1I3enRuWHU2c0V3TkhJSFh3REFITHlTdVdQM3BGYlo0Qnc5b1FZTUJmbVNsL3hXR0syVnN3aVhkCkNFcUZKRmdNUFk3NlJQY0o2R2dkTWcrWVRRWVVFamlRTjFpdmJKZjRWaUpCRTcrbVNteFZNNTAzVmlyQWZndkIKenBndTNzdHZIdHpRV1Z2eHJ0NTR0Rm9DMHRmWE1RRXNSU0VtTVRoVkhocVorZTJCOC9kTWQ2R1FodnE5ZXR1RQphQkxoSlpFUXlpMklpUU02Ulg2a01vZGdGUmcvemttTFZXQ0VITzEzaFV5Rkoxang1L0M5bEIyU2VENW9jd1h4CmJRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
			string(parsed.PublicKey))
		require.Equal(t, "0x97a6C1f3aaB5427B901fb135ED492749191C0f1F", parsed.Owner.Hex())
		require.Equal(t, uint64(1), parsed.ID)
	})
}

func TestParseValidatorAddedEvent(t *testing.T) {
	var rawValidatorAdded = `{
  "address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
  "topics": [
	"0xd432d53fd23906d0269fb9864b3832f32b83148df4315eab6ca914225c7fa2f4",
	"0x0000000000000000000000005cc0dde14e7256340cc820415a6022a7d1c93a35"
  ],
  "data": "0x000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003499530c000000000000000000000000000000000000000000000000ebec21ee1da400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030889b8e1896fd53a41716c07cc580a335d613350f28fec39f3cdc40b29c15566303e653c3b6ea4d532c0ffba7e04170e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c201828a47a13f6b0d11f2071ca4231d0f2aa885aa84e485385d30f778efb1984dca8fe01a6d9fa93b81a0c6d7293c8ef59e5ea99e14b49e76a10b78ec0a636932a40fa11238ddf8432a936fd4afbb1502ab973a66d718bb81c7a90a3bfa467030267ea693a0108c16eec1d7fe83e941e36b32e8a2b7f0f40a0ddc3c9b88367aab30d5e951504d4a428cb464a19f672631214e882625e375bf6f5ba28b5bdb78aa1e3495fff78ee60a99b3df6392172757fcc42fe9752aa91a2efceb7f6302e3df4b7d6865116867c73408dd2c39562e1ceb44b768a02a03b7e9e731863081a07a097089a8a25f190a598eca55a83f42e7045dd5cddea6f6c14250e1cef395bdea100987daa876a76b682a8a4d8e146fe7aea0f41dacac5585b45685bcd3effcfcd0079f78cce7b59eb5082821cdee4ef05cc69df843b294054bef40531c7e7b8971d2c317249105ffc52e2e9ba0365126eba0f56281a6b185782051efdf601e57b1e8bb942dced6f6b3678d499209863eb27df3ce88fd6165ed62347865e87f79e43344cc4277f53f22d08c2dfd96599677036088052a988e8885ae93b4039b0488a390b1db87f500addc188b217789dd6f925eeb182753068bc6ba0067ac4ea00ecd6a718755fb4881e47a414ee3176c002a05ec0a24f010c22de5943bf8e40df48b5380f32ad77e88f6534181d04b53681ef0d2dd916c46af415a8da13fa4350eb11bffbf05aa107235cce55fbc62f03a0bd341b410e2a8eb688c7a81d5148e9adc8c56d2a7ff859af64dfc01fa0885d071f27a5224868e061c763f697c4cae73f1ad8790a4f3351fb7c0da41ef51e703b54158669d6c4b468595db1d67eaf373b42e77519d27dca1c8e0e9038b7df6c11cba7ae2de0871bc96c366b6cb49b7bbc2757c74171e7d34f70a5026d0d3e94ade51323a49e0c07d5c49e6267268d59645cdf58c25ef27cb8857d80423569f195b27f211478ebb54ffed7c132c1912777304dc3742c15dff57a471388d66ea3e39bdd0861f45b37c94eec1d50c297c862ea4c5b1f2db7abd78900a10921f0634f75468e63ae1d21b1ad648b8ce7bc03196d0b09588991fb2261ec8314cdcf2012036625f173faad7489227185cda557876d9b8018e8581d4bce12d551adaa67ef881d8d90dc0549b985bd9b5809102b09d20525f96333c2bc92cc746af54e6f30d7a7ff008f500735d6e0b551b8898d4191e0cecaceb8a446879f37b4dda063578a06bb7aa19313730c40790e9a516e7d5d2d9c212304f189c5d8eb76a9b369d488376196752d8f5d67c5df05d1b83efb053ce8b7ad23de2d8915bc3fa2ae9e3ca3b71bdc5f61ad2136917f2152ab32d5d0bc3553a55391e99a5d0519decfc09e24a7197bacdeccde61c8a599709cd7b9346ba0b027db8a4d112840dc810fc8033f62b358168ac8a8586f1ffa3fd77dadfa50870fbb5110e3e715dab8e8ae2bc860e2ad6d31ac49be4bb2f87043ad4274a6ceccff3da875b45259827120fc247cf2a721e3b0758ec19e0060a4a148ff452b1f074a82dd34aef1d58ad690c81199354315afb33c2cb4d24cd73a91f4d4961536b37227a2ca7f5643d97a05e6b75f321303bf332c378ee43a26c0e3548c0be0bdb6833abf6388274ff15151771f19f6113f8adeb596a01d5d9e781f7985799ba2d6369e0ef0283df95a1fb4bbc925326021a9c0936b0dc9c2ecac5ef181dd0000000000000000000000000000000000000000000000000000000000000",
  "blockNumber": "0x6E10A0",
  "transactionHash": "0x56f069d696c03aad5cf40681a0e55c27bcf5659c1ea40e9ba46b1e0f163de281"
}`

	t.Run("validator added", func(t *testing.T) {
		vLogValidatorAdded, contractAbi := unmarshalLog(t, rawValidatorAdded, V1)
		abiParser := NewParser(logging.TestLogger(t), V1)
		parsed, err := abiParser.ParseValidatorAddedEvent(*vLogValidatorAdded, contractAbi)
		var malformedEventErr *abiparser.MalformedEventError
		require.NoError(t, err)
		require.NotNil(t, contractAbi)
		require.False(t, errors.As(err, &malformedEventErr))
		require.NotNil(t, parsed)
		require.Equal(t, "889b8e1896fd53a41716c07cc580a335d613350f28fec39f3cdc40b29c15566303e653c3b6ea4d532c0ffba7e04170e3", hex.EncodeToString(parsed.PublicKey))
		require.Equal(t, "0x5cC0DdE14E7256340CC820415a6022a7d1c93A35", parsed.Owner.Hex())
		operators := []uint64{1, 2, 3, 4}
		for i, opID := range parsed.OperatorIds {
			require.Equal(t, operators[i], opID)
		}
		shares := []string{"8a47a13f6b0d11f2071ca4231d0f2aa885aa84e485385d30f778efb1984dca8fe01a6d9fa93b81a0c6d7293c8ef59e5e", "a99e14b49e76a10b78ec0a636932a40fa11238ddf8432a936fd4afbb1502ab973a66d718bb81c7a90a3bfa467030267e", "a693a0108c16eec1d7fe83e941e36b32e8a2b7f0f40a0ddc3c9b88367aab30d5e951504d4a428cb464a19f672631214e", "882625e375bf6f5ba28b5bdb78aa1e3495fff78ee60a99b3df6392172757fcc42fe9752aa91a2efceb7f6302e3df4b7d"}
		for i, pk := range parsed.SharePublicKeys {
			require.Equal(t, shares[i], hex.EncodeToString(pk))
		}
	})
}

func unmarshalLog(t *testing.T, rawOperatorAdded string, abiVersion Version) (*types.Log, abi.ABI) {
	var vLogOperatorAdded types.Log
	err := json.Unmarshal([]byte(rawOperatorAdded), &vLogOperatorAdded)
	require.NoError(t, err)
	contractAbi, err := abi.JSON(strings.NewReader(ContractABI(abiVersion)))
	require.NoError(t, err)
	require.NotNil(t, contractAbi)
	return &vLogOperatorAdded, contractAbi
}
