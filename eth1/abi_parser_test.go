package eth1

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"github.com/ethereum/go-ethereum/crypto/secp256k1"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/pkg/errors"
	"github.com/stretchr/testify/require"

	"github.com/bloxapp/ssv/eth1/abiparser"
	"github.com/bloxapp/ssv/logging"
)

func TestParseOperatorAddedEvent(t *testing.T) {
	var rawOperatorAdded = `{
  "address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
  "topics": [
	"0xd839f31c14bd632f424e307b36abff63ca33684f77f28e35dc13718ef338f7f4",
	"0x0000000000000000000000000000000000000000000000000000000000000001",
	"0x0000000000000000000000009d4d2d2dd7f11953535691786690610512e26b6c"
  ],
  "data": "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000deb9cd9e0000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556424d5667324d5546585930303151554e4c61474e354d546c556145494b627939484d576c684e3142794f565572616c4a35615759355a6a4179524739736430393156325a4c4c7a645356556c684f45684562484276516c564552446b77525456515547644a5379397354584234527974586277707751324e3562544270576b395554304a7a4e44453562456833547a41346258466a61314a735a4567355745786d626d59325554687157465235596d3179597a64574e6d77794e56707263546c3455306f7762485231436e646d546e5654537a4e435a6e46744e6b51784f55593061545643626d56615357686a52564a54596c464c5744467862574e71596e5a464c326379516b6f34547a68615a5567726430527a54484a694e6e5a585156494b5933425957473175656c4533566c70365a6b6c485447564c5655314354546836535730726358493452475a34534568536556553151544533634655346379394d4e5570355258453152474a6a6332513264486c6e625170355545394259554e7a576c6456524549335547684c4f487055575539575969394d4d316c6e53545534626a4658656b35494d307335636d467265557070546d55785445394756565a7a51544644556e68745132597a436d6c525355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b00000000000000000000000000000000000000000000000000000000",
  "blockNumber": "0x843735",
  "transactionHash": "0x4f4f9c1e37cf0800a201227e8fa3cad6f8f246ac1cca1cb90e2c3311538b300c"
}`

	t.Run("operator added", func(t *testing.T) {
		LogOperatorAdded, contractAbi := unmarshalLog(t, rawOperatorAdded, V1)
		abiParser := NewParser(logging.TestLogger(t), V1)
		parsed, err := abiParser.ParseOperatorAddedEvent(*LogOperatorAdded, contractAbi)
		var malformedEventErr *abiparser.MalformedEventError
		require.NoError(t, err)
		require.False(t, errors.As(err, &malformedEventErr))
		require.NotNil(t, contractAbi)
		require.NotNil(t, parsed)
		require.Equal(t, "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMVg2MUFXY001QUNLaGN5MTlUaEIKby9HMWlhN1ByOVUralJ5aWY5ZjAyRG9sd091V2ZLLzdSVUlhOEhEbHBvQlVERDkwRTVQUGdJSy9sTXB4RytXbwpwQ2N5bTBpWk9UT0JzNDE5bEh3TzA4bXFja1JsZEg5WExmbmY2UThqWFR5Ym1yYzdWNmwyNVprcTl4U0owbHR1CndmTnVTSzNCZnFtNkQxOUY0aTVCbmVaSWhjRVJTYlFLWDFxbWNqYnZFL2cyQko4TzhaZUgrd0RzTHJiNnZXQVIKY3BYWG1uelE3Vlp6ZklHTGVLVU1CTTh6SW0rcXI4RGZ4SEhSeVU1QTE3cFU4cy9MNUp5RXE1RGJjc2Q2dHlnbQp5UE9BYUNzWldVREI3UGhLOHpUWU9WYi9MM1lnSTU4bjFXek5IM0s5cmFreUppTmUxTE9GVVZzQTFDUnhtQ2YzCmlRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
			string(parsed.PublicKey))
		require.Equal(t, "0x9d4D2d2dd7F11953535691786690610512E26b6C", parsed.Owner.Hex())
		require.Equal(t, uint64(1), parsed.OperatorId)
	})
}

func TestParseValidatorAddedEvent(t *testing.T) {
	var rawValidatorAdded = `{
  "address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
  "topics": [
	"0xd432d53fd23906d0269fb9864b3832f32b83148df4315eab6ca914225c7fa2f4",
	"0x0000000000000000000000005cc0dde14e7256340cc820415a6022a7d1c93a35"
  ],
  "data": "0x000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003499530c000000000000000000000000000000000000000000000000ebec21ee1da400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030889b8e1896fd53a41716c07cc580a335d613350f28fec39f3cdc40b29c15566303e653c3b6ea4d532c0ffba7e04170e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c201828a47a13f6b0d11f2071ca4231d0f2aa885aa84e485385d30f778efb1984dca8fe01a6d9fa93b81a0c6d7293c8ef59e5ea99e14b49e76a10b78ec0a636932a40fa11238ddf8432a936fd4afbb1502ab973a66d718bb81c7a90a3bfa467030267ea693a0108c16eec1d7fe83e941e36b32e8a2b7f0f40a0ddc3c9b88367aab30d5e951504d4a428cb464a19f672631214e882625e375bf6f5ba28b5bdb78aa1e3495fff78ee60a99b3df6392172757fcc42fe9752aa91a2efceb7f6302e3df4b7d6865116867c73408dd2c39562e1ceb44b768a02a03b7e9e731863081a07a097089a8a25f190a598eca55a83f42e7045dd5cddea6f6c14250e1cef395bdea100987daa876a76b682a8a4d8e146fe7aea0f41dacac5585b45685bcd3effcfcd0079f78cce7b59eb5082821cdee4ef05cc69df843b294054bef40531c7e7b8971d2c317249105ffc52e2e9ba0365126eba0f56281a6b185782051efdf601e57b1e8bb942dced6f6b3678d499209863eb27df3ce88fd6165ed62347865e87f79e43344cc4277f53f22d08c2dfd96599677036088052a988e8885ae93b4039b0488a390b1db87f500addc188b217789dd6f925eeb182753068bc6ba0067ac4ea00ecd6a718755fb4881e47a414ee3176c002a05ec0a24f010c22de5943bf8e40df48b5380f32ad77e88f6534181d04b53681ef0d2dd916c46af415a8da13fa4350eb11bffbf05aa107235cce55fbc62f03a0bd341b410e2a8eb688c7a81d5148e9adc8c56d2a7ff859af64dfc01fa0885d071f27a5224868e061c763f697c4cae73f1ad8790a4f3351fb7c0da41ef51e703b54158669d6c4b468595db1d67eaf373b42e77519d27dca1c8e0e9038b7df6c11cba7ae2de0871bc96c366b6cb49b7bbc2757c74171e7d34f70a5026d0d3e94ade51323a49e0c07d5c49e6267268d59645cdf58c25ef27cb8857d80423569f195b27f211478ebb54ffed7c132c1912777304dc3742c15dff57a471388d66ea3e39bdd0861f45b37c94eec1d50c297c862ea4c5b1f2db7abd78900a10921f0634f75468e63ae1d21b1ad648b8ce7bc03196d0b09588991fb2261ec8314cdcf2012036625f173faad7489227185cda557876d9b8018e8581d4bce12d551adaa67ef881d8d90dc0549b985bd9b5809102b09d20525f96333c2bc92cc746af54e6f30d7a7ff008f500735d6e0b551b8898d4191e0cecaceb8a446879f37b4dda063578a06bb7aa19313730c40790e9a516e7d5d2d9c212304f189c5d8eb76a9b369d488376196752d8f5d67c5df05d1b83efb053ce8b7ad23de2d8915bc3fa2ae9e3ca3b71bdc5f61ad2136917f2152ab32d5d0bc3553a55391e99a5d0519decfc09e24a7197bacdeccde61c8a599709cd7b9346ba0b027db8a4d112840dc810fc8033f62b358168ac8a8586f1ffa3fd77dadfa50870fbb5110e3e715dab8e8ae2bc860e2ad6d31ac49be4bb2f87043ad4274a6ceccff3da875b45259827120fc247cf2a721e3b0758ec19e0060a4a148ff452b1f074a82dd34aef1d58ad690c81199354315afb33c2cb4d24cd73a91f4d4961536b37227a2ca7f5643d97a05e6b75f321303bf332c378ee43a26c0e3548c0be0bdb6833abf6388274ff15151771f19f6113f8adeb596a01d5d9e781f7985799ba2d6369e0ef0283df95a1fb4bbc925326021a9c0936b0dc9c2ecac5ef181dd0000000000000000000000000000000000000000000000000000000000000",
  "blockNumber": "0x6E10A0",
  "transactionHash": "0x56f069d696c03aad5cf40681a0e55c27bcf5659c1ea40e9ba46b1e0f163de281"
}`

	t.Run("validator added", func(t *testing.T) {
		vLogValidatorAdded, contractAbi := unmarshalLog(t, rawValidatorAdded, V1)
		abiParser := NewParser(logging.TestLogger(t), V1)
		parsed, err := abiParser.ParseValidatorAddedEvent(*vLogValidatorAdded, contractAbi)
		var malformedEventErr *abiparser.MalformedEventError
		require.NoError(t, err)
		require.NotNil(t, contractAbi)
		require.False(t, errors.As(err, &malformedEventErr))
		require.NotNil(t, parsed)
		require.Equal(t, "889b8e1896fd53a41716c07cc580a335d613350f28fec39f3cdc40b29c15566303e653c3b6ea4d532c0ffba7e04170e3", hex.EncodeToString(parsed.PublicKey))
		require.Equal(t, "0x5cC0DdE14E7256340CC820415a6022a7d1c93A35", parsed.Owner.Hex())
		operators := []uint64{1, 2, 3, 4}
		for i, opID := range parsed.OperatorIds {
			require.Equal(t, operators[i], opID)
		}
		shares := []string{"8a47a13f6b0d11f2071ca4231d0f2aa885aa84e485385d30f778efb1984dca8fe01a6d9fa93b81a0c6d7293c8ef59e5e", "a99e14b49e76a10b78ec0a636932a40fa11238ddf8432a936fd4afbb1502ab973a66d718bb81c7a90a3bfa467030267e", "a693a0108c16eec1d7fe83e941e36b32e8a2b7f0f40a0ddc3c9b88367aab30d5e951504d4a428cb464a19f672631214e", "882625e375bf6f5ba28b5bdb78aa1e3495fff78ee60a99b3df6392172757fcc42fe9752aa91a2efceb7f6302e3df4b7d"}
		for i, pk := range parsed.SharePublicKeys {
			require.Equal(t, shares[i], hex.EncodeToString(pk))
		}
	})
}

func TestParseValidatorAddedEventWithSignature(t *testing.T) {
	var rawValidatorAdded = `{
  "address": "0x4B133c68A084B8A88f72eDCd7944B69c8D545f03",
  "topics": [
	"0x48a3ea0796746043948f6341d17ff8200937b99262a0b48c2663b951ed7114e5",
	"0x00000000000000000000000077fc6e8b24a623725d935bc88057098d0bca6eb3"
  ],
  "data": "0x000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000168e373a800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000003782aa15f89570000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000308a97a7c89b1912a4c3049dc00cfa1b3799fd590999d2e98b2830d890dd1459e84952661a37ab97072919fc3d4732aba9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000520aef2b05809ba5046ad76b60fc3b0fdae98aebc9547f9124f51bfabe41c6cd2c78caee07354146380a99fa65b51a7b3ce11644a1b7d3baf49fb809fe30d2c237a8794c08c271eb8fb308c9dac8b89d06b7932e44a9d9408fe6bb347e2ff887ba992b1db92c779f6e25adc38fb56bfc060e0a4cb069e9c94032654623f9fb29ae95f0cfaf945d1c6636bf2c6816da13ebf8c25f4fbf702bfd3a91d20f435be337e566906539ebf98b448888d187dd0046e8cabc1702cb72ddfeca5804e66503ce7989e5592d95f7efd2a5a70299006e16ffeca2dc4c7e4469d35b9e9abd48eac58c34cecea487c194acfa258fb6657ce178d23e793a5d1546e40f82de7b760943e12a78cf42c6e28b66c1224f7e6acb826aaa26cb5d41208447747f7a30c047ed393956c38567bc039b3854e7ffb2b6f6a66397e054750f93bc7ad6a9f4973e160cca4b5d0ee8ac9555aae2345dec797e45cb559be3dff14dfdd27c16d4c371a14967aa4ebbb72600b80a9160e50d8828d8762116139bbe40073992d12066f4bd568ba59d469bfb2013045c767a0d436b7d617b1e570342fd545a2732133f89f67efbcb5b0bd6c3f845c8a2437d2be28d9d50a22f41620baa5f437a15674e3b4edbd7d1276577f679d20f554afa19b10e646ef60dcfc7f2c89ff83995252a48472d241b48b056f8818298d15963487328ae8609cde3e78223ef768af30b70715701e0d0cdc698df8361386cdeff62b2ffaf80cf975b00d95d52b07494c354cee09918743285c4f4af123408d7ce696cedff51e9b5908cb0a76a966ef0cc6921941db2c92acd52b9beb30a3c260d717bf928d79c80a35c96d37ab38e6ae630a3c1ee6981a54b96649e13abe0f94a0fd0ddb57abcc3036b61720f3ec49784bea6f82690d937e17b327bb6c5249c0080cda1ea9db293e10cb445c5637ab58eb72786cfd0e82585b7c3b7a684ae7e591f31371f1fa372853f88275a7caecf3cbb6fdc34e99b9a8c75524343b33b4cb76292da0f96e5c4e1f89124ada36689c67a676fffc84d25730b2b9b2e30007518237ad895d079a3999f1038f7a478195ab62c63cdd536010228cfdf427355c5fbf89cc20a3c12412da61f7bbad986e0ed0a462bf05937448dc0bac713307c973ab0346c2ef0097997bddfdb9b0c534f07535896710c4138b93c4be9a857f1116ccf41628cb5d428ed602a9f77e2a6321d2f71b1e71a057b5b59ea38ff87cfab7e4185c0d61629742bfdae300bfd205c83fa917878d7df1241e69ce2138f3a604bc24ccc2c7af59a853287a5bc7cd13305e59937ed302772f600b32fc9c9b3d27f08365cfd031ce65fb61cc57e7c414c314e76046f7049a816fbb7e62419e70035284c9922b31b40015c5c7f5d8fee34bea9d1b040468d47f66853d6011f5e4aa238f1d0e532a7239e9f75ed4cbef9233b980aff37f2e4f44cf578503ebbebfd0dc7065b51f831b5ff1dc732542a30491078417c4841f42bd6686ecaf24f84db58fe4d65c78fbe3170b2d9dd2229b06a4026c875c00fea1065e1cb0152e59ac0d9112b7dc10b56a5542677ca8bc62348afb678334aacf0b57de9eaaac332dc180b4c18a41c03d684324f792be9585561ef9e17eceed1409f10b51f71ae3a6b1451aeace075dae7ff03ee5f91bf28f2dc38845b7b58a86fbb6d7beda418d7c092e80ebe53f99114d12c08e72594edc586c62a2da7f59bb898815e2d436ab3159a22a888b9661e8ef4b9ad801cd7fbb387e2075f66336f48add034d18bca373c1ae0d8440a8657add25d774c1b6917e8ccd5e8d79f7bac115a0a8559ba138853f0f915f69cf91bc083e7fcc1e0836bccbbca8744b60",
  "blockNumber": "0x89E8A0",
  "transactionHash": "0xa245f8413b5e733bc8884222a5f459424489af14b54b3f1a17e6969241c90be0"
}`

	t.Run("validator added", func(t *testing.T) {
		vLogValidatorAdded, contractAbi := unmarshalLog(t, rawValidatorAdded, V1)
		abiParser := NewParser(logging.TestLogger(t), V1)
		parsed, err := abiParser.ParseValidatorAddedEvent(*vLogValidatorAdded, contractAbi)
		var malformedEventErr *abiparser.MalformedEventError
		message := "0x77FC6e8B24a623725d935Bc88057098D0bCA6eB3:2"

		println(secp256k1.VerifySignature(parsed.PublicKey, bytes.NewBufferString(message).Bytes(), parsed.Signature))
		println("sakjdnlkasndklasndkas")
		require.NoError(t, err)
		require.NotNil(t, contractAbi)
		require.False(t, errors.As(err, &malformedEventErr))
		require.NotNil(t, parsed)
		require.Equal(t, "8a97a7c89b1912a4c3049dc00cfa1b3799fd590999d2e98b2830d890dd1459e84952661a37ab97072919fc3d4732aba9", hex.EncodeToString(parsed.PublicKey))
		require.Equal(t, "0x77FC6e8B24a623725d935Bc88057098D0bCA6eB3", parsed.Owner.Hex())
		require.Equal(t, "aef2b05809ba5046ad76b60fc3b0fdae98aebc9547f9124f51bfabe41c6cd2c78caee07354146380a99fa65b51a7b3ce11644a1b7d3baf49fb809fe30d2c237a8794c08c271eb8fb308c9dac8b89d06b7932e44a9d9408fe6bb347e2ff887ba9", hex.EncodeToString(parsed.Signature))
		operators := []uint64{1, 2, 3, 4}
		for i, opID := range parsed.OperatorIds {
			require.Equal(t, operators[i], opID)
		}
		shares := []string{"92b1db92c779f6e25adc38fb56bfc060e0a4cb069e9c94032654623f9fb29ae95f0cfaf945d1c6636bf2c6816da13ebf", "8c25f4fbf702bfd3a91d20f435be337e566906539ebf98b448888d187dd0046e8cabc1702cb72ddfeca5804e66503ce7", "989e5592d95f7efd2a5a70299006e16ffeca2dc4c7e4469d35b9e9abd48eac58c34cecea487c194acfa258fb6657ce17", "8d23e793a5d1546e40f82de7b760943e12a78cf42c6e28b66c1224f7e6acb826aaa26cb5d41208447747f7a30c047ed3"}
		for i, pk := range parsed.SharePublicKeys {
			require.Equal(t, shares[i], hex.EncodeToString(pk))
		}
	})
}

func unmarshalLog(t *testing.T, rawOperatorAdded string, abiVersion Version) (*types.Log, abi.ABI) {
	var vLogOperatorAdded types.Log
	err := json.Unmarshal([]byte(rawOperatorAdded), &vLogOperatorAdded)
	require.NoError(t, err)
	contractAbi, err := abi.JSON(strings.NewReader(ContractABI(abiVersion)))
	require.NoError(t, err)
	require.NotNil(t, contractAbi)
	return &vLogOperatorAdded, contractAbi
}
