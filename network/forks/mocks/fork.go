// Code generated by MockGen. DO NOT EDIT.
// Source: ./fork.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/bloxapp/ssv-spec/types"
	forks "github.com/bloxapp/ssv/network/forks"
	protocolp2p "github.com/bloxapp/ssv/protocol/v2/p2p"
	enode "github.com/ethereum/go-ethereum/p2p/enode"
	gomock "github.com/golang/mock/gomock"
	libp2p "github.com/libp2p/go-libp2p"
	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// MockFork is a mock of Fork interface.
type MockFork struct {
	ctrl     *gomock.Controller
	recorder *MockForkMockRecorder
}

// MockForkMockRecorder is the mock recorder for MockFork.
type MockForkMockRecorder struct {
	mock *MockFork
}

// NewMockFork creates a new mock instance.
func NewMockFork(ctrl *gomock.Controller) *MockFork {
	mock := &MockFork{ctrl: ctrl}
	mock.recorder = &MockForkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFork) EXPECT() *MockForkMockRecorder {
	return m.recorder
}

// AddOptions mocks base method.
func (m *MockFork) AddOptions(opts []libp2p.Option) []libp2p.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOptions", opts)
	ret0, _ := ret[0].([]libp2p.Option)
	return ret0
}

// AddOptions indicates an expected call of AddOptions.
func (mr *MockForkMockRecorder) AddOptions(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOptions", reflect.TypeOf((*MockFork)(nil).AddOptions), opts)
}

// DecodeNetworkMsg mocks base method.
func (m *MockFork) DecodeNetworkMsg(data []byte) (*types.SSVMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeNetworkMsg", data)
	ret0, _ := ret[0].(*types.SSVMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeNetworkMsg indicates an expected call of DecodeNetworkMsg.
func (mr *MockForkMockRecorder) DecodeNetworkMsg(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeNetworkMsg", reflect.TypeOf((*MockFork)(nil).DecodeNetworkMsg), data)
}

// DecorateNode mocks base method.
func (m *MockFork) DecorateNode(node *enode.LocalNode, args map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecorateNode", node, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecorateNode indicates an expected call of DecorateNode.
func (mr *MockForkMockRecorder) DecorateNode(node, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecorateNode", reflect.TypeOf((*MockFork)(nil).DecorateNode), node, args)
}

// EncodeNetworkMsg mocks base method.
func (m *MockFork) EncodeNetworkMsg(msg *types.SSVMessage) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeNetworkMsg", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeNetworkMsg indicates an expected call of EncodeNetworkMsg.
func (mr *MockForkMockRecorder) EncodeNetworkMsg(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeNetworkMsg", reflect.TypeOf((*MockFork)(nil).EncodeNetworkMsg), msg)
}

// GetTopicBaseName mocks base method.
func (m *MockFork) GetTopicBaseName(topicName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicBaseName", topicName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTopicBaseName indicates an expected call of GetTopicBaseName.
func (mr *MockForkMockRecorder) GetTopicBaseName(topicName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicBaseName", reflect.TypeOf((*MockFork)(nil).GetTopicBaseName), topicName)
}

// GetTopicFullName mocks base method.
func (m *MockFork) GetTopicFullName(baseName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicFullName", baseName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTopicFullName indicates an expected call of GetTopicFullName.
func (mr *MockForkMockRecorder) GetTopicFullName(baseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicFullName", reflect.TypeOf((*MockFork)(nil).GetTopicFullName), baseName)
}

// MsgID mocks base method.
func (m *MockFork) MsgID() forks.MsgIDFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgID")
	ret0, _ := ret[0].(forks.MsgIDFunc)
	return ret0
}

// MsgID indicates an expected call of MsgID.
func (mr *MockForkMockRecorder) MsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgID", reflect.TypeOf((*MockFork)(nil).MsgID))
}

// ProtocolID mocks base method.
func (m *MockFork) ProtocolID(prot protocolp2p.SyncProtocol) (protocol.ID, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocolID", prot)
	ret0, _ := ret[0].(protocol.ID)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProtocolID indicates an expected call of ProtocolID.
func (mr *MockForkMockRecorder) ProtocolID(prot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolID", reflect.TypeOf((*MockFork)(nil).ProtocolID), prot)
}

// SubnetTopicID mocks base method.
func (m *MockFork) SubnetTopicID(subnet int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetTopicID", subnet)
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetTopicID indicates an expected call of SubnetTopicID.
func (mr *MockForkMockRecorder) SubnetTopicID(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetTopicID", reflect.TypeOf((*MockFork)(nil).SubnetTopicID), subnet)
}

// Subnets mocks base method.
func (m *MockFork) Subnets() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].(int)
	return ret0
}

// Subnets indicates an expected call of Subnets.
func (mr *MockForkMockRecorder) Subnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockFork)(nil).Subnets))
}

// ValidatorSubnet mocks base method.
func (m *MockFork) ValidatorSubnet(validatorPKHex string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorSubnet", validatorPKHex)
	ret0, _ := ret[0].(int)
	return ret0
}

// ValidatorSubnet indicates an expected call of ValidatorSubnet.
func (mr *MockForkMockRecorder) ValidatorSubnet(validatorPKHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorSubnet", reflect.TypeOf((*MockFork)(nil).ValidatorSubnet), validatorPKHex)
}

// ValidatorTopicID mocks base method.
func (m *MockFork) ValidatorTopicID(pk []byte) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorTopicID", pk)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ValidatorTopicID indicates an expected call of ValidatorTopicID.
func (mr *MockForkMockRecorder) ValidatorTopicID(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorTopicID", reflect.TypeOf((*MockFork)(nil).ValidatorTopicID), pk)
}

// MocknodeRecord is a mock of nodeRecord interface.
type MocknodeRecord struct {
	ctrl     *gomock.Controller
	recorder *MocknodeRecordMockRecorder
}

// MocknodeRecordMockRecorder is the mock recorder for MocknodeRecord.
type MocknodeRecordMockRecorder struct {
	mock *MocknodeRecord
}

// NewMocknodeRecord creates a new mock instance.
func NewMocknodeRecord(ctrl *gomock.Controller) *MocknodeRecord {
	mock := &MocknodeRecord{ctrl: ctrl}
	mock.recorder = &MocknodeRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodeRecord) EXPECT() *MocknodeRecordMockRecorder {
	return m.recorder
}

// DecorateNode mocks base method.
func (m *MocknodeRecord) DecorateNode(node *enode.LocalNode, args map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecorateNode", node, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecorateNode indicates an expected call of DecorateNode.
func (mr *MocknodeRecordMockRecorder) DecorateNode(node, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecorateNode", reflect.TypeOf((*MocknodeRecord)(nil).DecorateNode), node, args)
}

// MockpubSubMapping is a mock of pubSubMapping interface.
type MockpubSubMapping struct {
	ctrl     *gomock.Controller
	recorder *MockpubSubMappingMockRecorder
}

// MockpubSubMappingMockRecorder is the mock recorder for MockpubSubMapping.
type MockpubSubMappingMockRecorder struct {
	mock *MockpubSubMapping
}

// NewMockpubSubMapping creates a new mock instance.
func NewMockpubSubMapping(ctrl *gomock.Controller) *MockpubSubMapping {
	mock := &MockpubSubMapping{ctrl: ctrl}
	mock.recorder = &MockpubSubMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpubSubMapping) EXPECT() *MockpubSubMappingMockRecorder {
	return m.recorder
}

// GetTopicBaseName mocks base method.
func (m *MockpubSubMapping) GetTopicBaseName(topicName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicBaseName", topicName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTopicBaseName indicates an expected call of GetTopicBaseName.
func (mr *MockpubSubMappingMockRecorder) GetTopicBaseName(topicName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicBaseName", reflect.TypeOf((*MockpubSubMapping)(nil).GetTopicBaseName), topicName)
}

// GetTopicFullName mocks base method.
func (m *MockpubSubMapping) GetTopicFullName(baseName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicFullName", baseName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTopicFullName indicates an expected call of GetTopicFullName.
func (mr *MockpubSubMappingMockRecorder) GetTopicFullName(baseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicFullName", reflect.TypeOf((*MockpubSubMapping)(nil).GetTopicFullName), baseName)
}

// SubnetTopicID mocks base method.
func (m *MockpubSubMapping) SubnetTopicID(subnet int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetTopicID", subnet)
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetTopicID indicates an expected call of SubnetTopicID.
func (mr *MockpubSubMappingMockRecorder) SubnetTopicID(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetTopicID", reflect.TypeOf((*MockpubSubMapping)(nil).SubnetTopicID), subnet)
}

// ValidatorSubnet mocks base method.
func (m *MockpubSubMapping) ValidatorSubnet(validatorPKHex string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorSubnet", validatorPKHex)
	ret0, _ := ret[0].(int)
	return ret0
}

// ValidatorSubnet indicates an expected call of ValidatorSubnet.
func (mr *MockpubSubMappingMockRecorder) ValidatorSubnet(validatorPKHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorSubnet", reflect.TypeOf((*MockpubSubMapping)(nil).ValidatorSubnet), validatorPKHex)
}

// ValidatorTopicID mocks base method.
func (m *MockpubSubMapping) ValidatorTopicID(pk []byte) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorTopicID", pk)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ValidatorTopicID indicates an expected call of ValidatorTopicID.
func (mr *MockpubSubMappingMockRecorder) ValidatorTopicID(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorTopicID", reflect.TypeOf((*MockpubSubMapping)(nil).ValidatorTopicID), pk)
}

// MockpubSubConfig is a mock of pubSubConfig interface.
type MockpubSubConfig struct {
	ctrl     *gomock.Controller
	recorder *MockpubSubConfigMockRecorder
}

// MockpubSubConfigMockRecorder is the mock recorder for MockpubSubConfig.
type MockpubSubConfigMockRecorder struct {
	mock *MockpubSubConfig
}

// NewMockpubSubConfig creates a new mock instance.
func NewMockpubSubConfig(ctrl *gomock.Controller) *MockpubSubConfig {
	mock := &MockpubSubConfig{ctrl: ctrl}
	mock.recorder = &MockpubSubConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpubSubConfig) EXPECT() *MockpubSubConfigMockRecorder {
	return m.recorder
}

// MsgID mocks base method.
func (m *MockpubSubConfig) MsgID() forks.MsgIDFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgID")
	ret0, _ := ret[0].(forks.MsgIDFunc)
	return ret0
}

// MsgID indicates an expected call of MsgID.
func (mr *MockpubSubConfigMockRecorder) MsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgID", reflect.TypeOf((*MockpubSubConfig)(nil).MsgID))
}

// Subnets mocks base method.
func (m *MockpubSubConfig) Subnets() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].(int)
	return ret0
}

// Subnets indicates an expected call of Subnets.
func (mr *MockpubSubConfigMockRecorder) Subnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockpubSubConfig)(nil).Subnets))
}

// Mocklibp2pConfig is a mock of libp2pConfig interface.
type Mocklibp2pConfig struct {
	ctrl     *gomock.Controller
	recorder *Mocklibp2pConfigMockRecorder
}

// Mocklibp2pConfigMockRecorder is the mock recorder for Mocklibp2pConfig.
type Mocklibp2pConfigMockRecorder struct {
	mock *Mocklibp2pConfig
}

// NewMocklibp2pConfig creates a new mock instance.
func NewMocklibp2pConfig(ctrl *gomock.Controller) *Mocklibp2pConfig {
	mock := &Mocklibp2pConfig{ctrl: ctrl}
	mock.recorder = &Mocklibp2pConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklibp2pConfig) EXPECT() *Mocklibp2pConfigMockRecorder {
	return m.recorder
}

// AddOptions mocks base method.
func (m *Mocklibp2pConfig) AddOptions(opts []libp2p.Option) []libp2p.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOptions", opts)
	ret0, _ := ret[0].([]libp2p.Option)
	return ret0
}

// AddOptions indicates an expected call of AddOptions.
func (mr *Mocklibp2pConfigMockRecorder) AddOptions(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOptions", reflect.TypeOf((*Mocklibp2pConfig)(nil).AddOptions), opts)
}

// Mockencoding is a mock of encoding interface.
type Mockencoding struct {
	ctrl     *gomock.Controller
	recorder *MockencodingMockRecorder
}

// MockencodingMockRecorder is the mock recorder for Mockencoding.
type MockencodingMockRecorder struct {
	mock *Mockencoding
}

// NewMockencoding creates a new mock instance.
func NewMockencoding(ctrl *gomock.Controller) *Mockencoding {
	mock := &Mockencoding{ctrl: ctrl}
	mock.recorder = &MockencodingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockencoding) EXPECT() *MockencodingMockRecorder {
	return m.recorder
}

// DecodeNetworkMsg mocks base method.
func (m *Mockencoding) DecodeNetworkMsg(data []byte) (*types.SSVMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeNetworkMsg", data)
	ret0, _ := ret[0].(*types.SSVMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeNetworkMsg indicates an expected call of DecodeNetworkMsg.
func (mr *MockencodingMockRecorder) DecodeNetworkMsg(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeNetworkMsg", reflect.TypeOf((*Mockencoding)(nil).DecodeNetworkMsg), data)
}

// EncodeNetworkMsg mocks base method.
func (m *Mockencoding) EncodeNetworkMsg(msg *types.SSVMessage) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeNetworkMsg", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeNetworkMsg indicates an expected call of EncodeNetworkMsg.
func (mr *MockencodingMockRecorder) EncodeNetworkMsg(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeNetworkMsg", reflect.TypeOf((*Mockencoding)(nil).EncodeNetworkMsg), msg)
}

// Mocksync is a mock of sync interface.
type Mocksync struct {
	ctrl     *gomock.Controller
	recorder *MocksyncMockRecorder
}

// MocksyncMockRecorder is the mock recorder for Mocksync.
type MocksyncMockRecorder struct {
	mock *Mocksync
}

// NewMocksync creates a new mock instance.
func NewMocksync(ctrl *gomock.Controller) *Mocksync {
	mock := &Mocksync{ctrl: ctrl}
	mock.recorder = &MocksyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksync) EXPECT() *MocksyncMockRecorder {
	return m.recorder
}

// ProtocolID mocks base method.
func (m *Mocksync) ProtocolID(prot protocolp2p.SyncProtocol) (protocol.ID, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocolID", prot)
	ret0, _ := ret[0].(protocol.ID)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProtocolID indicates an expected call of ProtocolID.
func (mr *MocksyncMockRecorder) ProtocolID(prot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolID", reflect.TypeOf((*Mocksync)(nil).ProtocolID), prot)
}
