// Code generated by MockGen. DO NOT EDIT.
// Source: ./metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	qbft "github.com/bloxapp/ssv-spec/qbft"
	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// EndStageCommit mocks base method.
func (m *MockMetrics) EndStageCommit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndStageCommit")
}

// EndStageCommit indicates an expected call of EndStageCommit.
func (mr *MockMetricsMockRecorder) EndStageCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndStageCommit", reflect.TypeOf((*MockMetrics)(nil).EndStageCommit))
}

// EndStagePrepare mocks base method.
func (m *MockMetrics) EndStagePrepare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndStagePrepare")
}

// EndStagePrepare indicates an expected call of EndStagePrepare.
func (mr *MockMetricsMockRecorder) EndStagePrepare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndStagePrepare", reflect.TypeOf((*MockMetrics)(nil).EndStagePrepare))
}

// EndStageProposal mocks base method.
func (m *MockMetrics) EndStageProposal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndStageProposal")
}

// EndStageProposal indicates an expected call of EndStageProposal.
func (mr *MockMetricsMockRecorder) EndStageProposal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndStageProposal", reflect.TypeOf((*MockMetrics)(nil).EndStageProposal))
}

// SetRound mocks base method.
func (m *MockMetrics) SetRound(round qbft.Round) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRound", round)
}

// SetRound indicates an expected call of SetRound.
func (mr *MockMetricsMockRecorder) SetRound(round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRound", reflect.TypeOf((*MockMetrics)(nil).SetRound), round)
}

// StartStage mocks base method.
func (m *MockMetrics) StartStage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartStage")
}

// StartStage indicates an expected call of StartStage.
func (mr *MockMetricsMockRecorder) StartStage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStage", reflect.TypeOf((*MockMetrics)(nil).StartStage))
}
